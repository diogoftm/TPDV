/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave1.edl - Top EDL file. */

enclave {
    trusted {
        public int ecallOpenVault([in, string] const char* fileName, [in, string] const char* psw);
        public int ecallOpenCipheredVault([in, count=data_size] char* data, size_t data_size, [in, string] char* psw);
        public int ecallCreateVault([in, string] const char* vaultName, [in, string] const char* psw, [in, string] const char* author);
        public int ecallInsertAsset([in, count=assetNameSize] const char *assetName, size_t assetNameSize, [in, count=assetDataSize] const unsigned char *assetData, int assetDataSize);
        public int ecallListAssets(void);
        public int ecallVaultInfo(void);
        public int ecallPrintAsset([in, string] char *name);
        public int ecallSaveAssetToFile([in, string] char *assetName, [in, string] char* fileName);
        public char ecallCheckDigest([in, string] const char *assetName, [in, string] const char *digest);
        public int ecallChangePassword([in, count=newPswSize] const char *newPsw, size_t newPswSize);
        public int ecallGetUnsealedCipheredData_1([out] uint32_t* data_size);
        public int ecallGetUnsealedCipheredData_2(uint32_t data_size, [out, size=data_size] uint8_t* data); 

    };
    untrusted {
        void ocall_e1_print_string([in, string] const char *str);
        void ocallSaveDataToFile([in, count=siz] const char* data, int siz, [in, string] const char* fileName);
        int ocallLoadSealedData([user_check] uint8_t* data, [in, string] const char* fileName);
        void ocallSaveSealedData([user_check] uint8_t* sealed_data, size_t sealed_size, [in, string] const char *fileName);
    };
};
